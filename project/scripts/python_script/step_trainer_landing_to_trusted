import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsgluedq.transforms import EvaluateDataQuality
from awsglue import DynamicFrame

def sparkSqlQuery(glueContext, query, mapping, transformation_ctx) -> DynamicFrame:
    for alias, frame in mapping.items():
        frame.toDF().createOrReplaceTempView(alias)
    result = spark.sql(query)
    return DynamicFrame.fromDF(result, glueContext, transformation_ctx)
args = getResolvedOptions(sys.argv, ['JOB_NAME'])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

# Default ruleset used by all target nodes with data quality enabled
DEFAULT_DATA_QUALITY_RULESET = """
    Rules = [
        ColumnCount > 0
    ]
"""

# Script generated for node Step Trainer Landing
StepTrainerLanding_node1735795000145 = glueContext.create_dynamic_frame.from_options(format_options={"multiLine": "false"}, connection_type="s3", format="json", connection_options={"paths": ["s3://tolus-stedi-datalake-bucket/step_trainer/landing/"], "recurse": True}, transformation_ctx="StepTrainerLanding_node1735795000145")

# Script generated for node Customer curated
Customercurated_node1735795096743 = glueContext.create_dynamic_frame.from_options(format_options={"multiLine": "false"}, connection_type="s3", format="json", connection_options={"paths": ["s3://tolus-stedi-datalake-bucket/customer/curated/"], "recurse": True}, transformation_ctx="Customercurated_node1735795096743")

# Script generated for node Joining
SqlQuery5444 = '''
SELECT  DISTINCT
    c.customername, 
    c.email, 
    c.phone, 
    c.birthday, 
    c.serialnumber, 
    c.registrationdate, 
    c.lastupdatedate, 
    c.sharewithresearchasofdate, 
    c.sharewithpublicasofdate, 
    c.sharewithfriendsasofdate,
    s.sensorreadingtime,  -- Make sure this column exists in the step_trainer_landing table
    s.serialnumber,
    s.distancefromobject
FROM 
    c
Inner JOIN 
     s
ON 
    c.serialnumber = s.serialnumber
    WHERE 
    c.serialnumber IN (SELECT serialnumber FROM s);
'''
Joining_node1735795133515 = sparkSqlQuery(glueContext, query = SqlQuery5444, mapping = {"c":Customercurated_node1735795096743, "s":StepTrainerLanding_node1735795000145}, transformation_ctx = "Joining_node1735795133515")

# Script generated for node Amazon S3
EvaluateDataQuality().process_rows(frame=Joining_node1735795133515, ruleset=DEFAULT_DATA_QUALITY_RULESET, publishing_options={"dataQualityEvaluationContext": "EvaluateDataQuality_node1735790265756", "enableDataQualityResultsPublishing": True}, additional_options={"dataQualityResultsPublishing.strategy": "BEST_EFFORT", "observations.scope": "ALL"})
AmazonS3_node1735797392620 = glueContext.getSink(path="s3://tolus-stedi-datalake-bucket/step_trainer/trusted/", connection_type="s3", updateBehavior="UPDATE_IN_DATABASE", partitionKeys=[], enableUpdateCatalog=True, transformation_ctx="AmazonS3_node1735797392620")
AmazonS3_node1735797392620.setCatalogInfo(catalogDatabase="stedi",catalogTableName="step_trainer_trusted")
AmazonS3_node1735797392620.setFormat("json")
AmazonS3_node1735797392620.writeFrame(Joining_node1735795133515)
job.commit()